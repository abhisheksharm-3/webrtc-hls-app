import { FeatureCardProps } from "@/components/landing/FeatureCard";
import { HyperspeedProps } from "@/components/ui/backgrounds/Hyperspeed/Hyperspeed";
import {
Â  Video,
Â  Radio,
Â  Users,
Â  Settings,
Â  Repeat,
Â  Rocket,
Â  Zap,
Â  Globe,
Â  Shield,
Â  Smartphone,
Â  UserPlus,
Â  Eye,
} from "lucide-react";

export const features = [
Â  {
Â  Â  icon: Video,
Â  Â  title: "WebRTC Streaming",
Â  Â  description:
Â  Â  Â  "Ultra-low latency peer-to-peer video and audio streaming for real-time communication.",
    // This can also be converted to a variant system later if needed
Â  Â  color: "bg-primary/10 group-hover:bg-primary/20",
Â  Â  iconColor: "text-primary",
Â  },
Â  {
Â  Â  icon: Radio,
Â  Â  title: "HLS Broadcasting",
Â  Â  description:
Â  Â  Â  "Automatic transcoding to HLS for unlimited concurrent viewers with global CDN support.",
Â  Â  color: "bg-purple-500/10 group-hover:bg-purple-500/20",
Â  Â  iconColor: "text-purple-500",
Â  },
Â  {
Â  Â  icon: Users,
Â  Â  title: "Multi-participant",
Â  Â  description:
Â  Â  Â  "Support for multiple streamers in a single room with seamless participant management.",
Â  Â  color: "bg-emerald-500/10 group-hover:bg-emerald-500/20",
Â  Â  iconColor: "text-emerald-500",
Â  },
Â  {
Â  Â  icon: Settings,
Â  Â  title: "Production Ready",
Â  Â  description:
Â  Â  Â  "Built with TypeScript, comprehensive error handling, and enterprise-grade architecture.",
Â  Â  color: "bg-orange-500/10 group-hover:bg-orange-500/20",
Â  Â  iconColor: "text-orange-500",
Â  },
Â  {
Â  Â  icon: Repeat,
Â  Â  title: "Real-time Sync",
Â  Â  description:
Â  Â  Â  "Instant room management and signaling using Socket.io for state synchronization.",
Â  Â  color: "bg-red-500/10 group-hover:bg-red-500/20",
Â  Â  iconColor: "text-red-500",
Â  },
Â  {
Â  Â  icon: Rocket,
Â  Â  title: "Easy Deployment",
Â  Â  description:
Â  Â  Â  "Docker support with complete containerization and one-click deployment solutions.",
Â  Â  color: "bg-indigo-500/10 group-hover:bg-indigo-500/20",
Â  Â  iconColor: "text-indigo-500",
Â  },
];

// Define a type for a single feature object for type safety
export type Feature = (typeof features)[0];

export const stats = [
Â  { value: "10K+", label: "Active Streamers" },
Â  { value: "1M+", label: "Hours Streamed" },
Â  { value: "99.9%", label: "Uptime" },
];

type HyperspeedOptions = HyperspeedProps["effectOptions"];

/**
Â * Configuration for the Hero Section's Hyperspeed background.
Â */
export const heroHyperspeedConfig: HyperspeedOptions = {
Â  onSpeedUp: () => {},
Â  onSlowDown: () => {},
Â  distortion: "turbulentDistortion",
Â  length: 400,
Â  roadWidth: 12,
Â  islandWidth: 3,
Â  lanesPerRoad: 4,
Â  fov: 90,
Â  fovSpeedUp: 150,
Â  speedUp: 1.5,
Â  carLightsFade: 0.6,
Â  totalSideLightSticks: 30,
Â  lightPairsPerRoadWay: 50,
Â  shoulderLinesWidthPercentage: 0.08,
Â  brokenLinesWidthPercentage: 0.12,
Â  brokenLinesLengthPercentage: 0.6,
Â  lightStickWidth: [0.15, 0.6],
Â  lightStickHeight: [1.5, 2.0],
Â  movingAwaySpeed: [70, 90],
Â  movingCloserSpeed: [-130, -170],
Â  carLightsLength: [400 * 0.05, 400 * 0.25],
Â  carLightsRadius: [0.08, 0.18],
Â  carWidthPercentage: [0.35, 0.55],
Â  carShiftX: [-0.9, 0.9],
Â  carFloorSeparation: [0, 6],
Â  colors: {
Â  Â  roadColor: 0x0a0a0a,
Â  Â  islandColor: 0x171717,
Â  Â  background: 0x000000,
Â  Â  shoulderLines: 0x3b82f6,
Â  Â  brokenLines: 0x6366f1,
Â  Â  leftCars: [0x3b82f6, 0x8b5cf6, 0x06b6d4, 0x10b981],
Â  Â  rightCars: [0xf59e0b, 0xef4444, 0xec4899, 0x8b5cf6],
Â  Â  sticks: 0x06b6d4,
Â  },
};

/**
Â * Data for the feature cards displayed in the Hero Section.
Â */
export type HeroFeature = FeatureCardProps;

export const heroFeatures: HeroFeature[] = [
Â  {
Â  Â  icon: Zap,
Â  Â  title: "Low Latency",
Â  Â  description: "< 100ms delay",
Â  Â  color: "blue",
Â  },
Â  {
Â  Â  icon: Globe,
Â  Â  title: "Unlimited Scale",
Â  Â  description: "âˆž Viewers",
Â  Â  color: "purple",
Â  },
Â  {
Â  Â  icon: Shield,
Â  Â  title: "Secure",
Â  Â  description: "E2E Encrypted",
Â  Â  color: "emerald",
Â  },
Â  {
Â  Â  icon: Smartphone,
Â  Â  title: "Cross Platform",
Â  Â  description: "Any Device",
Â  Â  color: "orange",
Â  },
];

/**
 * Data for the "How It Works" section timeline.
 * âœ… The `tip` object now uses a semantic `variant` instead of `className`.
 */
export const steps: {
    number: number;
    title: string;
    description: string;
    icon: React.ComponentType<{ className?: string }>;
    tip?: { text: string; variant: "info" | "host" | "guest" };
}[] = [
Â  {
Â  Â  number: 1,
Â  Â  icon: Rocket,
Â  Â  title: "Create a Room",
Â  Â  description:
Â  Â  Â  "The host starts a new session, instantly generating a unique, shareable room code. The WebRTC connection is established, ready for a guest.",
Â  Â  tip: {
Â  Â  Â  text: 'ðŸ’¡ The host gets a room code like "abc-123-xyz"',
Â  Â  Â  variant: "info",
Â  Â  },
Â  },
Â  {
Â  Â  number: 2,
Â  Â  icon: UserPlus,
Â  Â  title: "Invite a Guest",
Â  Â  description:
Â  Â  Â  "The host shares the room code with one guest, who joins the peer-to-peer session. Both can stream with ultra-low latency.",
Â  Â  tip: {
Â  Â  Â  text: "ðŸ’¡ Only 2 people can actively stream (host + guest).",
Â  Â  Â  variant: "guest",
Â  Â  },
Â  },
Â  {
Â  Â  number: 3,
Â  Â  icon: Eye,
Â  Â  title: "Broadcast to Viewers",
Â  Â  description:
Â  Â  Â  "The host enables HLS broadcasting. The server then transcodes the stream, allowing an unlimited number of viewers to watch from any device.",
Â  Â  tip: {
Â  Â  Â  text: "ðŸ’¡ Viewers join at /watch - no video/audio needed.",
Â  Â  Â  variant: "host",
Â  Â  },
Â  },
];

// Define a type for a single step object for type safety
export type Step = (typeof steps)[0];
